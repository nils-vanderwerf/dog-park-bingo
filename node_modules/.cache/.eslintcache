[{"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/index.js":"1","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js":"2","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/reportWebVitals.js":"3","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/constants/dogBingoOptions.js":"4","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/components/Card.js":"5","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/components/BingoItem.js":"6","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/components/Dialogue.js":"7"},{"size":478,"mtime":1630466205659,"results":"8","hashOfConfig":"9"},{"size":7442,"mtime":1630485059743,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1630123808762,"results":"11","hashOfConfig":"9"},{"size":1538,"mtime":1630127211971,"results":"12","hashOfConfig":"9"},{"size":1573,"mtime":1630470334955,"results":"13","hashOfConfig":"9"},{"size":508,"mtime":1630470364779,"results":"14","hashOfConfig":"9"},{"size":1537,"mtime":1630475830519,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vy17m6",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/index.js",[],"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js",["34","35","36"],"import React, { Component } from 'react'\nimport { dogBingoOptions } from './constants/dogBingoOptions'\nimport Card from './components/Card'\n// import './App.css'\nimport { styled } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Dialogue from './components/Dialogue';\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// SET TO MAX OF 9 or add more options\nexport let dimension = 5;\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#07B0F2',\n    },\n    alert: {\n      main: '#038C4C'\n    }\n  },\n});\n\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      rows: [],\n      column: [],\n      options: dogBingoOptions,\n      hits: [],\n      prevCompleted: [],\n      showState: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.handleClear = this.handleClear.bind(this)\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this)\n  }\n\n  handleClick(event) {\n    event.target.classList.add(\"mark-found\")\n    if (event.target.lastChild.id !== undefined && !this.state.hits.includes(event.target.lastChild.id))\n      this.setState({\n        hits: [...this.state.hits, event.target.lastChild.id]\n      }, function () { this.checkLine(event.target.lastChild.id) })\n\n      document.getElementById(\"completed-line\").style.opacity = 0;\n  }\n  handleClear = () => {\n    const textConts = document.querySelectorAll('span.text-content')\n    for (let i = 0; i < textConts.length; i++) {\n      textConts[i].innerHTML = \"\"\n    }\n    //Remove marked from squares\n    this.setState({\n      hits: [],\n      prevCompleted: []\n    })\n    this.removeMarked()\n    document.getElementById(\"completed-line\").style.opacity = 0;\n  }\n\n  removeMarked = () => {\n    const squares = document.getElementsByClassName('square')\n    for (let i = 0; i < squares.length; i++) {\n      squares[i].classList.remove('mark-found', 'mark-line-complete')\n    }\n  }\n\n  handleGenerateRandom = () => {\n    document.getElementById(\"completed-line\").style.opacity = 0;\n    const randCards = this.generateCards(dimension * dimension)\n    console.log(randCards)\n    this.setState({\n      slots: randCards,\n      hits: [],\n      prevCompleted: []\n    }, function () { this.fillSquares() })\n    this.removeMarked()\n  }\n\n  fillSquares() {\n    const textConts = document.querySelectorAll('span.text-content')\n    for (let i = 0; i < textConts.length; i++) {\n      textConts[i].setAttribute(\"id\", i)\n      textConts[i].innerHTML = this.state.slots[i]\n    }\n  }\n\n  handleGo() {\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step + 1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step + 1\n    });\n  }\n\n  handleClear() {\n    this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n    });\n  }\n\n  handleClose = () => {\n    this.setState({\n      showState: false\n    })\n  };\n\n  handleAdd() {\n    const pick = this.state.pick;\n    let slots = this.state.slots;\n    slots.push(pick)\n    this.setState({\n      slots: slots,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1,\n    });\n  }\n\n  checkLine(clickedEl) {\n    const lines = [\n      //       [0,1,2,3,4],\n      //       [5,6,7,8,9],\n      //       [10,11,12,13,14],\n      //       [15,16,17,18,19],\n      //       [20,21,22,23,24],\n\n      //       [0,5,10,15,20],\n      //       [1,6,11,16,21],\n      //       [2,7,12,17,22],\n      //       [3,8,13,18,23],\n      //       [4,9,14,19,24],\n\n      // [0,6,12,18,24],\n      // [4,8,12,16,20]\n    ];\n\n    let slash1 = [];\n    let slash2 = [];\n\n    for (let i = 0; i < dimension; i++) {\n      let row = [];\n      let col = [];\n      for (var o = 0; o < dimension; o++) {\n        row.push(o + dimension * i);\n        col.push(o * dimension + i);\n      }\n      lines.push(row);\n      lines.push(col);\n\n      slash1.push(i + dimension * i);\n      slash2.push((dimension - 1) * (i + 1));\n    }\n    lines.push(slash1);\n    lines.push(slash2);\n\n    console.log(\"LINES\", lines)\n\n    const hits = this.state.hits.map(hit => parseInt(hit));\n\n    for (let i = 0; i < lines.length; i++) {\n      //If the hits includes every member of a line\n      //and the prev completed array has not been completed before\n      if (lines[i].every(c => hits.includes(c)) &&\n        !this.state.prevCompleted.includes(i) &&\n        this.state.slots.length !== 0) {\n        // alert(`LINE ${i} COMPLETE!`)\n        this.indicateCompletedLine(lines[i])\n        this.setState({\n          prevCompleted: [...this.state.prevCompleted, i]\n        })\n      }\n    }\n    this.checkWholeSquare()\n  }\n\n  indicateCompletedLine = (compLine) => {\n    console.log(\"LINE COMPLETE\", compLine)\n    compLine.forEach(id => {\n      console.log(\"ID OF COMPLETED\", id)\n      let targElement = document.getElementById(`${id}`).parentElement\n      console.log(\"TARGETED FINISHED ELEMENT\", targElement)\n\n      targElement.classList.add('mark-line-complete')\n    })\n    document.getElementById(\"completed-line\").style.opacity = 1;\n\n    //Check if all squares have been checked\n\n  }\n\n  checkWholeSquare = () => {\n    if (this.state.hits.length >= this.state.slots.length && this.state.slots.length !== 0) {\n      //Replace with modal\n      this.setState({\n        showState: true\n      })\n    }\n  }\n\n  generateCards = (max) => {\n    //Create pool of spaces\n    const pool = Array.apply(null, Array(max + 1)).map(function (_, i) { return i; });\n    let arr = [];\n    while (arr.length < max) {\n      const idx = Math.floor(Math.random() * dogBingoOptions.length)\n      const dogEl = dogBingoOptions[idx]\n      console.log(idx)\n      if (pool[idx] != 0) {\n        arr.push(dogEl);\n        pool[idx] = 0;\n      }\n    }\n    return arr;\n  }\n\n  render() {\n\n    const alert = document.getElementById('completed-line')\n    console.log(alert)\n\n    return (\n      <div className=\"container\">\n        <h1>Bingo</h1>\n        <div className=\"button-container\">\n          <div className=\"container-inner\">\n            <ThemeProvider theme={theme}>\n              <Button variant=\"contained\" color=\"primary\"\n                onClick={this.handleClear}>Clear</Button>\n              <Button variant=\"contained\" color=\"primary\" onClick={this.handleGenerateRandom}>New Card</Button>\n            </ThemeProvider>\n          </div>\n        </div>\n        <Alert id=\"completed-line\" variant=\"filled\" severity=\"success\">\n          Line Complete!\n        </Alert>\n        <div className=\"Game__bingo_card\">\n          <Card\n            hits={this.state.hits}\n            slots={this.state.slots}\n            dimension={dimension}\n            handle={this.handleClick}\n          />\n        </div>\n        <ThemeProvider theme={theme}>\n          <Dialogue\n            handleClose={this.handleClose}\n            showState={this.state.showState}\n          >\n          </Dialogue>\n        </ThemeProvider>\n\n      </div>\n    )\n  }\n}","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/reportWebVitals.js",[],["37","38"],"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/constants/dogBingoOptions.js",[],"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/components/Card.js",[],"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/components/BingoItem.js",["39","40"],"import React from 'react'\nimport { Grid } from '@material-ui/core';\nimport { Textfit } from 'react-textfit';\n\nexport default class BingoItem extends React.Component{\n    constructor(props){\n      super(props);\n\n    }\n\n    render(){\n      return(\n        <Grid item className=\"square\" align-items=\"center\"\n          onClick={(e) => this.props.handleClick(e)}>\n                <span class=\"text-content\" style={{fontSize: this.props.dimension <= 6 ? '20px' : '16px'}}></span>\n        </Grid>\n      );\n    }\n  }","/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/components/Dialogue.js",["41","42","43"],"import React, { Component } from 'react'\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Typography } from '@material-ui/core';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDog } from '@fortawesome/free-solid-svg-icons'\nimport { DialogTitle, DialogContent } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport { Dialog } from '@material-ui/core';\n\n\nexport default class Dialogue extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <Dialog onClose={this.props.handleClose} aria-labelledby=\"customized-dialog-title\" open={this.props.showState}>\n                <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n                <FontAwesomeIcon icon={faDog} />\n                </DialogTitle>\n                <DialogContent dividers>\n                    <Typography variant=\"h2\" style={{ fontWeight: '600', textAlign: 'center' }} gutterBottom>\n                        BINGO!\n                    </Typography>\n                    <Typography gutterBottom>\n                        You have found all the dog squares!\n                    </Typography>\n                </DialogContent>\n                <Button \n                    variant=\"contained\" \n                    color=\"primary\" \n                    onClick={this.props.handleClose}>\n                        Ruff!\n                </Button>\n            </Dialog>\n        )\n    }\n}\n",{"ruleId":"44","severity":1,"message":"45","line":5,"column":10,"nodeType":"46","messageId":"47","endLine":5,"endColumn":16},{"ruleId":"44","severity":1,"message":"48","line":14,"column":7,"nodeType":"46","messageId":"47","endLine":14,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":235,"column":21,"nodeType":"51","messageId":"52","endLine":235,"endColumn":23},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"44","severity":1,"message":"57","line":3,"column":10,"nodeType":"46","messageId":"47","endLine":3,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":6,"column":5,"nodeType":"60","messageId":"61","endLine":9,"endColumn":6},{"ruleId":"44","severity":1,"message":"62","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":18},{"ruleId":"44","severity":1,"message":"63","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":13,"column":5,"nodeType":"60","messageId":"61","endLine":15,"endColumn":6},"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'styles' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["64"],"no-negated-in-lhs",["65"],"'Textfit' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'IconButton' is defined but never used.","'CloseIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]