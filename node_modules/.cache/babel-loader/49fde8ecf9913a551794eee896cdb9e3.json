{"ast":null,"code":"var _jsxFileName = \"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar dimension = 5;\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      picked: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0,\n      dimension: dimension\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleGo = this.handleGo.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  render() {\n    const results = this.state.picked.map(p => /*#__PURE__*/_jsxDEV(Board, {\n      nums: p,\n      hits: this.state.hits,\n      hit_lines: this.checkLine(p)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 50\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bingo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleRandom(),\n        children: \"random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleClear(),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleAdd(),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Pick Numbers, next: \", this.state.nxtNum]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        nums: this.state.pick,\n        handle: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleGo(),\n        children: \"go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Result \", this.state.hits ? this.state.hits.toString() : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), results]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n  handleClick(i) {\n    if (this.state.pick[i] == 0) {\n      let newNums = this.state.pick.slice(0);\n      newNums[i] = this.state.nxtNum;\n      this.setState({\n        pick: newNums,\n        nxtNum: this.state.nxtNum + 1\n      });\n    }\n  }\n\n  handleGo() {\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step + 1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step + 1\n    });\n  }\n\n  handleRandom() {\n    const ranNums = this.generateNums(dimension * dimension);\n    this.setState({\n      pick: ranNums,\n      result: ranNums\n    });\n  }\n\n  handleClear() {\n    this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      picked: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n    });\n  }\n\n  handleAdd() {\n    const pick = this.state.pick;\n    let picked = this.state.picked;\n    picked.push(pick);\n    this.setState({\n      picked: picked,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1\n    });\n  }\n\n  generateNums(max) {\n    const pool = Array.apply(null, Array(max + 1)).map(function (_, i) {\n      return i;\n    });\n    let arr = [];\n\n    while (arr.length < max) {\n      const idx = parseInt(Math.random() * (max + 1));\n\n      if (pool[idx] != 0) {\n        arr.push(pool[idx]);\n        pool[idx] = 0;\n      }\n    }\n\n    return arr;\n  }\n\n  checkLine(arr) {\n    const lines = [//       [0,1,2,3,4],\n      //       [5,6,7,8,9],\n      //       [10,11,12,13,14],\n      //       [15,16,17,18,19],\n      //       [20,21,22,23,24],\n      //       [0,5,10,15,20],\n      //       [1,6,11,16,21],\n      //       [2,7,12,17,22],\n      //       [3,8,13,18,23],\n      //       [4,9,14,19,24],\n      // [0,6,12,18,24],\n      // [4,8,12,16,20]\n    ];\n    let slash1 = [];\n    let slash2 = [];\n\n    for (var i = 0; i < dimension; i++) {\n      let row = [];\n      let col = [];\n\n      for (var o = 0; o < dimension; o++) {\n        row.push(o + dimension * i);\n        col.push(o * dimension + i);\n      }\n\n      lines.push(row);\n      lines.push(col);\n      slash1.push(i + dimension * i);\n      slash2.push((dimension - 1) * (i + 1));\n    }\n\n    lines.push(slash1);\n    lines.push(slash2);\n    const hits = this.state.hits || [];\n    let rtn = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      let line_is_hit = true;\n\n      for (var num in lines[i]) {\n        if (undefined == arr[lines[i][num]] || !hits.includes(arr[lines[i][num]])) {\n          line_is_hit = false;\n          break;\n        }\n      }\n\n      if (line_is_hit) {\n        for (var num in lines[i]) {\n          rtn.push(lines[i][num]);\n        }\n      }\n    }\n\n    return rtn;\n  }\n\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const num_tiles = this.props.nums.map((n, i) => /*#__PURE__*/_jsxDEV(Btn, {\n      active: (this.props.hits || []).includes(n),\n      lined: (this.props.hit_lines || []).includes(i),\n      idx: i,\n      num: n,\n      handle: this.props.handle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 46 * dimension,\n        height: 46 * dimension\n      },\n      className: \"group\",\n      children: num_tiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Btn extends React.Component {\n  constructor(props) {\n    super(props);\n    if (undefined != this.props.handle) this.handleClick = this.props.handle.bind(this);else this.handleClick = () => {};\n  }\n\n  render() {\n    let status = '';\n\n    if (this.props.active == true) {\n      status = 'active';\n    }\n\n    if (this.props.lined == true) {\n      status = 'lined';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn \" + status,\n      onClick: e => this.handleClick(this.props.idx),\n      children: this.props.num != 0 ? this.props.num : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"black\",\n        children: \"\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js"],"names":["React","dimension","App","Component","constructor","props","state","pick","Array","fill","picked","result","nxtNum","hits","hit_pool","generateNums","hit_step","handleClick","bind","handleClear","handleGo","handleAdd","render","results","map","p","checkLine","handleRandom","toString","i","newNums","slice","setState","ranNums","push","max","pool","apply","_","arr","length","idx","parseInt","Math","random","lines","slash1","slash2","row","col","o","rtn","line_is_hit","num","undefined","includes","Board","num_tiles","nums","n","hit_lines","handle","width","height","Btn","status","active","lined","e"],"mappings":"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","sourcesContent":["import React from 'react'\n\nvar dimension = 5;\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      picked: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0,\n      dimension: dimension\n    };\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleGo = this.handleGo.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n  render(){\n    const results = this.state.picked.map((p) => <Board nums={p} hits={this.state.hits} hit_lines={this.checkLine(p)}/>);\n                                        \n    return (\n      <div>\n        <h1>Bingo</h1>\n        <button onClick={() => this.handleRandom()}>random</button>\n        <button onClick={() => this.handleClear()}>Clear</button>\n        <button onClick={() => this.handleAdd()}>Add</button>  \n        <h1> Pick Numbers, next: {this.state.nxtNum}</h1>\n        <Board nums={this.state.pick} handle={this.handleClick}/>   \n        <br/>\n        <button onClick={() => this.handleGo()}>go</button>\n        <h1> Result {(this.state.hits)? this.state.hits.toString() : ''}</h1> \n        {results}\n      </div>\n    );\n  }\n  \n  handleClick(i){\n    if(this.state.pick[i] == 0){\n      let newNums = this.state.pick.slice(0);\n      newNums[i] = this.state.nxtNum;\n      this.setState({\n        pick: newNums,\n        nxtNum: this.state.nxtNum+1\n      });\n    }\n  }\n  \n  handleGo(){\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step+1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step+1\n    });\n  }\n  \n  handleRandom(){\n      const ranNums = this.generateNums(dimension * dimension);\n      this.setState({\n        pick: ranNums,\n        result: ranNums,\n      });\n  }\n  \n  handleClear(){\n      this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      picked: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n      });\n  }\n  \n  handleAdd(){\n    const pick = this.state.pick;\n    let picked = this.state.picked;\n    picked.push(pick)\n    this.setState({\n      picked: picked,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1,\n    });\n  }\n  \n  generateNums(max){\n      const pool = Array.apply(null, Array(max+1)).map(function (_, i) {return i;});\n      let arr = [];\n      while(arr.length < max){\n        const idx = parseInt(Math.random() * (max+1));\n        if(pool[idx] != 0){\n          arr.push(pool[idx]);\n          pool[idx] = 0;\n        }\n      }\n      return arr;\n  }\n  \n  checkLine(arr){\n    const lines = [\n//       [0,1,2,3,4],\n//       [5,6,7,8,9],\n//       [10,11,12,13,14],\n//       [15,16,17,18,19],\n//       [20,21,22,23,24],\n      \n//       [0,5,10,15,20],\n//       [1,6,11,16,21],\n//       [2,7,12,17,22],\n//       [3,8,13,18,23],\n//       [4,9,14,19,24],\n      \n      // [0,6,12,18,24],\n      // [4,8,12,16,20]\n    ];\n    \n    let slash1 = [];\n    let slash2 = [];\n    for(var i = 0; i < dimension; i++){\n      let row = [];\n      let col = [];\n      \n      for(var o = 0; o < dimension; o++){\n        row.push(o + dimension * i);\n        col.push(o * dimension + i);\n      }\n      lines.push(row);\n      lines.push(col);\n      \n      slash1.push(i + dimension * i);\n      slash2.push((dimension - 1) * (i + 1));\n    }\n    lines.push(slash1);\n    lines.push(slash2);\n    \n    const hits = this.state.hits || [];\n    let rtn = [];\n    for(var i = 0; i < lines.length; i++){\n      let line_is_hit = true;\n      for(var num in lines[i]){\n        if(undefined == arr[lines[i][num]] || !hits.includes(arr[lines[i][num]])){\n          line_is_hit = false;\n          break;\n        }\n      }\n      \n      if(line_is_hit){\n        for(var num in lines[i]){\n          rtn.push(lines[i][num]);\n        }\n      }\n      \n    }\n    return rtn;\n  }\n}\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n  }\n  \n  render(){\n    const num_tiles = this.props.nums.map((n, i) => \n      <Btn active={ ((this.props.hits || []).includes(n)) } \n        lined={ ((this.props.hit_lines || []).includes(i)) }\n        idx={i} num={n} \n        handle={this.props.handle}\n      />\n    );\n    return(\n      <div style={{width: 46 * dimension, height: 46 * dimension}} className=\"group\">\n        {num_tiles}\n      </div>\n    );\n  }\n  \n}\n\nclass Btn extends React.Component{\n  constructor(props){\n    super(props);\n    \n    if(undefined != this.props.handle)\n      this.handleClick = this.props.handle.bind(this);\n    else\n      this.handleClick = () => {};\n  }\n  render(){\n    let status = '';\n    if(this.props.active == true){\n      status = 'active';\n    }\n    if(this.props.lined == true){\n      status = 'lined';\n    }\n    return(\n      <div className={\"btn \" + status} \n        onClick={(e) => this.handleClick(this.props.idx)}\n      >\n        {(this.props.num != 0) ? this.props.num : <span className=\"black\">&nbsp;</span>}\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}