{"ast":null,"code":"var _jsxFileName = \"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js\";\nimport React, { Component } from 'react';\nimport { dogBingoOptions } from './constants/dogBingoOptions';\nimport Card from './components/Card';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleGenerateRandom = () => {\n      console.log(this.state.options);\n      const randCards = this.generateCards(dimension * dimension);\n      console.log(randCards);\n      this.setState({\n        slots: randCards,\n        result: randCards\n      });\n    };\n\n    this.handleClick = i => {\n      if (this.state.pick[i] === 0) {\n        let newCardVals = this.state.pick.slice(0);\n        newCardVals[i] = this.state.nxtNum;\n        this.setState({\n          pick: newCardVals,\n          nxtNum: this.state.nxtNum + 1\n        });\n      }\n    };\n\n    this.generateCards = max => {\n      //Create pool of spaces\n      const pool = Array.apply(null, Array(max + 1)).map(function (_, i) {\n        return i;\n      });\n      let arr = [];\n\n      while (arr.length < max) {\n        const idx = Math.floor(Math.random() * dogBingoOptions.length);\n        const dogEl = dogBingoOptions[idx];\n        console.log(idx);\n\n        if (pool[idx] != 0) {\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n\n      this.setState({\n        cards: [...this.state.cards, /*#__PURE__*/_jsxDEV(Card, {\n          hits: this.state.hits,\n          slots: this.state.slots\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 38\n        }, this)]\n      });\n      return arr;\n    };\n\n    this.state = {\n      cards: [],\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      row: [],\n      column: [],\n      nxtNum: 1,\n      options: dogBingoOptions,\n      hits: null,\n      hit_pool: this.generateCards(dimension * dimension),\n      hit_step: 0\n    };\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleGo() {\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step + 1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step + 1\n    });\n  }\n\n  handleClear() {\n    this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n    });\n  }\n\n  handleAdd() {\n    const pick = this.state.pick;\n    let slots = this.state.slots;\n    slots.push(pick);\n    this.setState({\n      slots: slots,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1\n    });\n  }\n\n  checkLine(arr) {\n    const lines = [//       [0,1,2,3,4],\n      //       [5,6,7,8,9],\n      //       [10,11,12,13,14],\n      //       [15,16,17,18,19],\n      //       [20,21,22,23,24],\n      //       [0,5,10,15,20],\n      //       [1,6,11,16,21],\n      //       [2,7,12,17,22],\n      //       [3,8,13,18,23],\n      //       [4,9,14,19,24],\n      // [0,6,12,18,24],\n      // [4,8,12,16,20]\n    ];\n    let slash1 = [];\n    let slash2 = [];\n\n    for (var i = 0; i < dimension; i++) {\n      let row = [];\n      let col = [];\n\n      for (var o = 0; o < dimension; o++) {\n        row.push(o + dimension * i);\n        col.push(o * dimension + i);\n      }\n\n      lines.push(row);\n      lines.push(col);\n      slash1.push(i + dimension * i);\n      slash2.push((dimension - 1) * (i + 1));\n    }\n\n    lines.push(slash1);\n    lines.push(slash2);\n    const hits = this.state.hits || [];\n    let rtn = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      let line_is_hit = true;\n\n      for (var num in lines[i]) {\n        if (undefined == arr[lines[i][num]] || !hits.includes(arr[lines[i][num]])) {\n          line_is_hit = false;\n          break;\n        }\n      }\n\n      if (line_is_hit) {\n        for (var num in lines[i]) {\n          rtn.push(lines[i][num]);\n        }\n      }\n    }\n\n    return rtn;\n  }\n\n  render() {\n    const cards = this.state.cards;\n    console.log(cards);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bingo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleGenerateRandom,\n        children: \"New Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Game__bingo_cards\",\n        children: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js"],"names":["React","Component","dogBingoOptions","Card","dimension","App","constructor","props","handleGenerateRandom","console","log","state","options","randCards","generateCards","setState","slots","result","handleClick","i","pick","newCardVals","slice","nxtNum","max","pool","Array","apply","map","_","arr","length","idx","Math","floor","random","dogEl","push","cards","hits","index","fill","row","column","hit_pool","hit_step","bind","handleGo","handleClear","generateNums","handleAdd","checkLine","lines","slash1","slash2","col","o","rtn","line_is_hit","num","undefined","includes","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {dogBingoOptions} from './constants/dogBingoOptions'\nimport Card from './components/Card'\nimport './App.css'\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [],\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      row: [],\n      column: [],\n      nxtNum: 1,\n      options: dogBingoOptions,\n      hits: null,\n      hit_pool: this.generateCards(dimension * dimension),\n      hit_step: 0,\n\n    }\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleGenerateRandom = () => {\n    console.log(this.state.options)\n    const randCards = this.generateCards(dimension * dimension)\n    console.log(randCards)\n    this.setState({\n      slots: randCards,\n      result: randCards\n    })\n  }\n\n  handleGo(){\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step+1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step+1\n    });\n  }\n\n  handleClick = (i) => {\n    if (this.state.pick[i] === 0) {\n      let newCardVals = this.state.pick.slice(0);\n      newCardVals[i] = this.state.nxtNum;\n      this.setState({\n        pick: newCardVals,\n        nxtNum: this.state.nxtNum + 1 \n      })\n    }\n  }\n\n  handleClear(){\n    this.setState({\n    pick: new Array(dimension * dimension).fill(0),\n    slots: [],\n    result: [],\n    nxtNum: 1,\n    hits: null,\n    hit_pool: this.generateNums(dimension * dimension),\n    hit_step: 0\n    });\n}\n\nhandleAdd(){\n  const pick = this.state.pick;\n  let slots = this.state.slots;\n  slots.push(pick)\n  this.setState({\n    slots: slots,\n    pick: new Array(dimension * dimension).fill(0),\n    nxtNum: 1,\n  });\n}\n\n  generateCards = (max) => {\n    //Create pool of spaces\n    const pool = Array.apply(null, Array(max+1)).map(function (_, i) {return i;});\n      let arr = [];\n      while(arr.length < max){\n        const idx = Math.floor(Math.random()* dogBingoOptions.length)\n        const dogEl = dogBingoOptions[idx]\n        console.log(idx)\n        if(pool[idx] != 0){\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n      this.setState({\n        cards: [...this.state.cards, <Card key={index} \n          hits={this.state.hits} \n          slots={this.state.slots} \n          />]\n      })\n      return arr\n\n  }\n\n  checkLine(arr){\n    const lines = [\n//       [0,1,2,3,4],\n//       [5,6,7,8,9],\n//       [10,11,12,13,14],\n//       [15,16,17,18,19],\n//       [20,21,22,23,24],\n      \n//       [0,5,10,15,20],\n//       [1,6,11,16,21],\n//       [2,7,12,17,22],\n//       [3,8,13,18,23],\n//       [4,9,14,19,24],\n      \n      // [0,6,12,18,24],\n      // [4,8,12,16,20]\n    ];\n    \n    let slash1 = [];\n    let slash2 = [];\n    for(var i = 0; i < dimension; i++){\n      let row = [];\n      let col = [];\n      \n      for(var o = 0; o < dimension; o++){\n        row.push(o + dimension * i);\n        col.push(o * dimension + i);\n      }\n      lines.push(row);\n      lines.push(col);\n      \n      slash1.push(i + dimension * i);\n      slash2.push((dimension - 1) * (i + 1));\n    }\n    lines.push(slash1);\n    lines.push(slash2);\n    \n    const hits = this.state.hits || [];\n    let rtn = [];\n    for(var i = 0; i < lines.length; i++){\n      let line_is_hit = true;\n      for(var num in lines[i]){\n        if(undefined == arr[lines[i][num]] || !hits.includes(arr[lines[i][num]])){\n          line_is_hit = false;\n          break;\n        }\n      }\n      \n      if(line_is_hit){\n        for(var num in lines[i]){\n          rtn.push(lines[i][num]);\n        }\n      }\n      \n    }\n    return rtn;\n  }\n\n  render() {                                      \n    const cards = this.state.cards\n\n    console.log(cards)\n\n    return (\n      <div>\n        <h1>Bingo</h1>\n        <button>Clear</button>\n        <button onClick={this.handleGenerateRandom}>New Card</button>\n        <div className=\"Game__bingo_cards\">{cards}</div>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}