{"ast":null,"code":"var _jsxFileName = \"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js\";\nimport React, { Component } from 'react';\nimport { dogBingoOptions } from './constants/dogBingoOptions';\nimport Card from './components/Card'; // import './App.css'\n\nimport { styled } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClear = () => {\n      const textConts = document.querySelectorAll('span.text-content');\n\n      for (let i = 0; i < textConts.length; i++) {\n        textConts[i].innerHTML = \"\";\n      } //Remove marked from squares\n\n\n      this.removeMarked();\n    };\n\n    this.removeMarked = () => {\n      const squares = document.getElementsByClassName('square');\n\n      for (let i = 0; i < squares.length; i++) {\n        squares[i].classList.remove('mark-found');\n      }\n    };\n\n    this.handleGenerateRandom = () => {\n      console.log(this.state.options);\n      const randCards = this.generateCards(dimension * dimension);\n      console.log(randCards);\n      this.setState({\n        slots: randCards\n      }, function () {\n        this.fillSquares();\n      });\n      this.removeMarked();\n    };\n\n    this.generateCards = max => {\n      //Create pool of spaces\n      const pool = Array.apply(null, Array(max + 1)).map(function (_, i) {\n        return i;\n      });\n      let arr = [];\n\n      while (arr.length < max) {\n        const idx = Math.floor(Math.random() * dogBingoOptions.length);\n        const dogEl = dogBingoOptions[idx];\n        console.log(idx);\n\n        if (pool[idx] != 0) {\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n\n      return arr;\n    };\n\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      row: [],\n      column: [],\n      options: dogBingoOptions,\n      hits: null\n    };\n    this.handleClear = this.handleClear.bind(this);\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this);\n  }\n\n  fillSquares() {\n    const textConts = document.querySelectorAll('span.text-content');\n\n    for (let i = 0; i < textConts.length; i++) {\n      console.log(\"RANDOM ELEMENT\", this.state.slots[i]);\n      textConts[i].innerHTML = this.state.slots[i];\n    }\n  }\n\n  handleGo() {\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step + 1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step + 1\n    });\n  }\n\n  handleClear() {\n    this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n    });\n  }\n\n  handleAdd() {\n    const pick = this.state.pick;\n    let slots = this.state.slots;\n    slots.push(pick);\n    this.setState({\n      slots: slots,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bingo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleGenerateRandom,\n        children: \"New Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Game__bingo_card\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          hits: this.state.hits,\n          slots: this.state.slots,\n          dimension: dimension\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js"],"names":["React","Component","dogBingoOptions","Card","styled","dimension","App","constructor","props","handleClear","textConts","document","querySelectorAll","i","length","innerHTML","removeMarked","squares","getElementsByClassName","classList","remove","handleGenerateRandom","console","log","state","options","randCards","generateCards","setState","slots","fillSquares","max","pool","Array","apply","map","_","arr","idx","Math","floor","random","dogEl","push","pick","fill","row","column","hits","bind","handleGo","hit_pool","slice","hit_step","result","nxtNum","generateNums","handleAdd","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { dogBingoOptions } from './constants/dogBingoOptions'\nimport Card from './components/Card'\n// import './App.css'\nimport { styled } from '@material-ui/core/styles';\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      row: [],\n      column: [],\n      options: dogBingoOptions,\n      hits: null,\n    }\n\n    this.handleClear = this.handleClear.bind(this)\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this)\n  }\n\n  handleClear = () => {\n    const textConts = document.querySelectorAll('span.text-content')\n    for (let i = 0; i < textConts.length; i++) {\n      textConts[i].innerHTML = \"\"\n    }\n    //Remove marked from squares\n    this.removeMarked()\n  }\n\n  removeMarked = () => {\n    const squares = document.getElementsByClassName('square')\n    for (let i = 0; i < squares.length; i++) {\n      squares[i].classList.remove('mark-found')\n    }\n  }\n\n  handleGenerateRandom = () => {\n    console.log(this.state.options)\n    const randCards = this.generateCards(dimension * dimension)\n    console.log(randCards)\n    this.setState({\n      slots: randCards,\n    }, function() { this.fillSquares() })\n    this.removeMarked()\n  }\n\n  fillSquares() {\n    const textConts = document.querySelectorAll('span.text-content')\n    for (let i = 0; i < textConts.length; i++) {\n      console.log(\"RANDOM ELEMENT\", this.state.slots[i])\n      textConts[i].innerHTML = this.state.slots[i]\n    }\n  }\n\n  handleGo() {\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step + 1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step + 1\n    });\n  }\n\n  handleClear() {\n    this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n    });\n  }\n\n  handleAdd() {\n    const pick = this.state.pick;\n    let slots = this.state.slots;\n    slots.push(pick)\n    this.setState({\n      slots: slots,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1,\n    });\n  }\n\n  generateCards = (max) => {\n    //Create pool of spaces\n    const pool = Array.apply(null, Array(max + 1)).map(function (_, i) { return i; });\n    let arr = [];\n    while (arr.length < max) {\n      const idx = Math.floor(Math.random() * dogBingoOptions.length)\n      const dogEl = dogBingoOptions[idx]\n      console.log(idx)\n      if (pool[idx] != 0) {\n        arr.push(dogEl);\n        pool[idx] = 0;\n      }\n    }\n    return arr;\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Bingo</h1>\n        <button onClick={this.handleClear}>Clear</button>\n        <button onClick={this.handleGenerateRandom}>New Card</button>\n        <div className=\"Game__bingo_card\">\n          <Card\n            hits={this.state.hits}\n            slots={this.state.slots}\n            dimension={dimension}\n          />\n        </div>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}