{"ast":null,"code":"var _jsxFileName = \"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js\";\nimport React, { Component } from 'react';\nimport { dogBingoOptions } from './constants/dogBingoOptions';\nimport Card from './components/Card'; // import './App.css'\n\nimport { styled } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClear = () => {\n      this.setState({\n        cards: []\n      });\n    };\n\n    this.handleGenerateRandom = () => {\n      console.log(this.state.options);\n      const randCards = this.generateCards(dimension * dimension);\n      console.log(randCards);\n      this.setState({\n        slots: randCards\n      });\n\n      let newCard = /*#__PURE__*/_jsxDEV(Card, {\n        hits: this.state.hits,\n        slots: this.state.slots,\n        dimension: dimension\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this);\n\n      this.setState({\n        cards: [...this.state.cards, newCard]\n      });\n    };\n\n    this.handleClick = i => {\n      if (this.state.pick[i] === 0) {\n        let newCardVals = this.state.pick.slice(0);\n        newCardVals[i] = this.state.nxtNum;\n        this.setState({\n          pick: newCardVals,\n          nxtNum: this.state.nxtNum + 1\n        });\n      }\n    };\n\n    this.generateCards = max => {\n      //Create pool of spaces\n      const pool = Array.apply(null, Array(max + 1)).map(function (_, i) {\n        return i;\n      });\n      let arr = [];\n\n      while (arr.length < max) {\n        const idx = Math.floor(Math.random() * dogBingoOptions.length);\n        const dogEl = dogBingoOptions[idx];\n        console.log(idx);\n\n        if (pool[idx] != 0) {\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n\n      return arr;\n    };\n\n    this.state = {\n      cards: [],\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      row: [],\n      column: [],\n      nxtNum: 1,\n      options: dogBingoOptions,\n      hits: null,\n      hit_step: 0\n    };\n    this.handleClear = this.handleClear.bind(this);\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleGo() {\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step + 1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step + 1\n    });\n  }\n\n  handleClear() {\n    this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n    });\n  }\n\n  handleAdd() {\n    const pick = this.state.pick;\n    let slots = this.state.slots;\n    slots.push(pick);\n    this.setState({\n      slots: slots,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bingo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleGenerateRandom,\n        children: \"New Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Game__bingo_cards\",\n        children: this.state.cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js"],"names":["React","Component","dogBingoOptions","Card","styled","dimension","App","constructor","props","handleClear","setState","cards","handleGenerateRandom","console","log","state","options","randCards","generateCards","slots","newCard","hits","handleClick","i","pick","newCardVals","slice","nxtNum","max","pool","Array","apply","map","_","arr","length","idx","Math","floor","random","dogEl","push","fill","row","column","hit_step","bind","handleGo","hit_pool","result","generateNums","handleAdd","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { dogBingoOptions } from './constants/dogBingoOptions'\nimport Card from './components/Card'\n// import './App.css'\nimport { styled } from '@material-ui/core/styles';\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [],\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      row: [],\n      column: [],\n      nxtNum: 1,\n      options: dogBingoOptions,\n      hits: null,\n      hit_step: 0,\n\n    }\n\n    this.handleClear = this.handleClear.bind(this)\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClear = () => {\n    this.setState({\n      cards: []\n    })\n  }\n  handleGenerateRandom = () => {\n    console.log(this.state.options)\n    const randCards = this.generateCards(dimension * dimension)\n    console.log(randCards)\n    this.setState({\n      slots: randCards,\n    })\n    let newCard = \n    <Card\n      hits={this.state.hits}\n      slots={this.state.slots}\n      dimension={dimension}\n    />\n\n    this.setState({\n      cards: [...this.state.cards, newCard]\n    })\n\n  }\n\n  handleGo() {\n    const hit_pool = this.state.hit_pool;\n    const hits = hit_pool.slice(0, this.state.hit_step + 1);\n    this.setState({\n      hits: hits,\n      hit_step: this.state.hit_step + 1\n    });\n  }\n\n  handleClick = (i) => {\n    if (this.state.pick[i] === 0) {\n      let newCardVals = this.state.pick.slice(0);\n      newCardVals[i] = this.state.nxtNum;\n      this.setState({\n        pick: newCardVals,\n        nxtNum: this.state.nxtNum + 1\n      })\n    }\n  }\n\n  handleClear() {\n    this.setState({\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      nxtNum: 1,\n      hits: null,\n      hit_pool: this.generateNums(dimension * dimension),\n      hit_step: 0\n    });\n  }\n\n  handleAdd() {\n    const pick = this.state.pick;\n    let slots = this.state.slots;\n    slots.push(pick)\n    this.setState({\n      slots: slots,\n      pick: new Array(dimension * dimension).fill(0),\n      nxtNum: 1,\n    });\n  }\n\n  generateCards = (max) => {\n    //Create pool of spaces\n    const pool = Array.apply(null, Array(max + 1)).map(function (_, i) { return i; });\n    let arr = [];\n    while (arr.length < max) {\n      const idx = Math.floor(Math.random() * dogBingoOptions.length)\n      const dogEl = dogBingoOptions[idx]\n      console.log(idx)\n      if (pool[idx] != 0) {\n        arr.push(dogEl);\n        pool[idx] = 0;\n      }\n    }\n    return arr;\n  }\n\n  \n\n  render() {\n\n    return (\n      <div>\n        <h1>Bingo</h1>\n        <button>Clear</button>\n        <button onClick={this.handleGenerateRandom}>New Card</button>\n        <div className=\"Game__bingo_cards\">\n          {this.state.cards}\n        </div>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}