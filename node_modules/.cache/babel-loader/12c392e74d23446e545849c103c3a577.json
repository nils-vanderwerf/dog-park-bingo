{"ast":null,"code":"var _jsxFileName = \"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js\";\nimport React, { Component } from 'react';\nimport { dogBingoOptions } from './constants/dogBingoOptions';\nimport Board from './components/Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleGenerateRandom = () => {\n      console.log(this.state.options);\n      const randCards = this.generateCards(dimension * dimension);\n      console.log(randCards);\n      this.setState({\n        slots: randCards,\n        result: randCards\n      });\n    };\n\n    this.handleClick = i => {\n      if (this.state.pick[i] === 0) {\n        let newCardVals = this.state.pick.slice(0);\n        newCardVals[i] = this.state.nxtNum;\n        this.setState({\n          pick: newCardVals,\n          nxtNum: this.state.nxtNum + 1\n        });\n      }\n    };\n\n    this.generateCards = max => {\n      //Create pool of spaces\n      const pool = Array.apply(null, Array(max + 1)).map(function (_, i) {\n        return i;\n      });\n      let arr = [];\n\n      while (arr.length < max) {\n        const idx = Math.floor(Math.random() * dogBingoOptions.length);\n        const dogEl = dogBingoOptions[idx];\n        console.log(idx);\n\n        if (pool[idx] != 0) {\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n\n      return arr;\n    };\n\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      row: [],\n      column: [],\n      nxtNum: 1,\n      options: dogBingoOptions,\n      hits: null\n    };\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    const results = this.state.slots.map(p => {\n      /*#__PURE__*/\n      _jsxDEV(Board, {\n        slots: this.state.slots,\n        handle: this.handleClick,\n        dimension: dimension\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bingo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleGenerateRandom,\n        children: \"New Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), results]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js"],"names":["React","Component","dogBingoOptions","Board","dimension","App","constructor","props","handleGenerateRandom","console","log","state","options","randCards","generateCards","setState","slots","result","handleClick","i","pick","newCardVals","slice","nxtNum","max","pool","Array","apply","map","_","arr","length","idx","Math","floor","random","dogEl","push","fill","row","column","hits","bind","render","results","p"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {dogBingoOptions} from './constants/dogBingoOptions'\nimport Board from './components/Board'\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      row: [],\n      column: [],\n      nxtNum: 1,\n      options: dogBingoOptions,\n      hits: null\n\n    }\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this)\n    this.handleClick = this.handleClick.bind(this\n      )\n  }\n\n  handleGenerateRandom = () => {\n    console.log(this.state.options)\n    const randCards = this.generateCards(dimension * dimension)\n    console.log(randCards)\n    this.setState({\n      slots: randCards,\n      result: randCards\n    })\n  }\n\n  handleClick = (i) => {\n    if (this.state.pick[i] === 0) {\n      let newCardVals = this.state.pick.slice(0);\n      newCardVals[i] = this.state.nxtNum;\n      this.setState({\n        pick: newCardVals,\n        nxtNum: this.state.nxtNum + 1 \n      })\n    }\n  }\n\n  generateCards = (max) => {\n    //Create pool of spaces\n    const pool = Array.apply(null, Array(max+1)).map(function (_, i) {return i;});\n      let arr = [];\n      while(arr.length < max){\n        const idx = Math.floor(Math.random()* dogBingoOptions.length)\n        const dogEl = dogBingoOptions[idx]\n        console.log(idx)\n        if(pool[idx] != 0){\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n      return arr;\n  }\n  render() {\n\n    const results = this.state.slots.map((p) => {\n    <Board slots = {this.state.slots} \n    handle={this.handleClick}\n    dimension={dimension}/> }\n    )\n    \n    return (\n      <div>\n        <h1>Bingo</h1>\n        <button>Clear</button>\n        <button onClick={this.handleGenerateRandom}>New Card</button>\n        {results}\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}