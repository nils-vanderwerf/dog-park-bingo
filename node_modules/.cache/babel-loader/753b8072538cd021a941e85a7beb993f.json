{"ast":null,"code":"var _jsxFileName = \"/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js\";\nimport React, { Component } from 'react';\nimport { dogBingoOptions } from './constants/dogBingoOptions';\nimport Board from './components/Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleGenerateRandom = () => {\n      console.log(this.state.options);\n      const randCards = this.generateCards(dimension * dimension);\n      console.log(randCards);\n      this.setState({\n        slots: randCards,\n        result: randCards\n      });\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      console.log(\"CLICKED!\");\n    };\n\n    this.generateCards = max => {\n      //Create pool of spaces\n      const pool = Array.apply(null, Array(max + 1)).map(function (_, i) {\n        return i;\n      });\n      let arr = [];\n\n      while (arr.length < max) {\n        const idx = Math.floor(Math.random() * dogBingoOptions.length);\n        const dogEl = dogBingoOptions[idx];\n        console.log(idx);\n\n        if (pool[idx] != 0) {\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n\n      return arr;\n    };\n\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      row: [],\n      column: [],\n      options: dogBingoOptions,\n      hits: null\n    };\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.generateCards = this.generateCards.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bingo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleGenerateRandom,\n        children: \"New Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        slots: this.state.slots,\n        handle: this.handleClick,\n        dimension: dimension\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nilsvanderwerf/Development/code/coding-exercises/dog-park-bingo/src/App.js"],"names":["React","Component","dogBingoOptions","Board","dimension","App","constructor","props","handleGenerateRandom","console","log","state","options","randCards","generateCards","setState","slots","result","handleClick","event","preventDefault","max","pool","Array","apply","map","_","i","arr","length","idx","Math","floor","random","dogEl","push","pick","fill","row","column","hits","bind","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,eAAR,QAA8B,6BAA9B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AACA,IAAIC,SAAS,GAAG,CAAhB;AACA,eAAe,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AACzCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAkBnBC,oBAlBmB,GAkBI,MAAM;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,OAAvB;AACA,YAAMC,SAAS,GAAG,KAAKC,aAAL,CAAmBV,SAAS,GAAGA,SAA/B,CAAlB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,WAAKE,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEH,SADK;AAEZI,QAAAA,MAAM,EAAEJ;AAFI,OAAd;AAID,KA1BkB;;AAAA,SA4BnBK,WA5BmB,GA4BJC,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACC,cAAN;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,KA/BkB;;AAAA,SAiCnBI,aAjCmB,GAiCFO,GAAD,IAAS;AACvB;AACA,YAAMC,IAAI,GAAGC,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACF,GAAG,GAAC,CAAL,CAAvB,EAAgCI,GAAhC,CAAoC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAC,eAAOA,CAAP;AAAU,OAA/D,CAAb;AACE,UAAIC,GAAG,GAAG,EAAV;;AACA,aAAMA,GAAG,CAACC,MAAJ,GAAaR,GAAnB,EAAuB;AACrB,cAAMS,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAe/B,eAAe,CAAC2B,MAA1C,CAAZ;AACA,cAAMK,KAAK,GAAGhC,eAAe,CAAC4B,GAAD,CAA7B;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAYoB,GAAZ;;AACA,YAAGR,IAAI,CAACQ,GAAD,CAAJ,IAAa,CAAhB,EAAkB;AAChBF,UAAAA,GAAG,CAACO,IAAJ,CAASD,KAAT;AACAZ,UAAAA,IAAI,CAACQ,GAAD,CAAJ,GAAY,CAAZ;AACD;AACF;;AACD,aAAOF,GAAP;AACH,KA/CkB;;AAEjB,SAAKjB,KAAL,GAAa;AACXyB,MAAAA,IAAI,EAAE,IAAIb,KAAJ,CAAUnB,SAAS,GAAGA,SAAtB,EAAiCiC,IAAjC,CAAsC,CAAtC,CADK;AAEXrB,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,MAAM,EAAE,EAHG;AAIXqB,MAAAA,GAAG,EAAE,EAJM;AAKXC,MAAAA,MAAM,EAAE,EALG;AAMX3B,MAAAA,OAAO,EAAEV,eANE;AAOXsC,MAAAA,IAAI,EAAE;AAPK,KAAb;AAUA,SAAKhC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BiC,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKvB,WAAL,GAAmB,KAAKA,WAAL,CAAiBuB,IAAjB,CAAsB,IAAtB,CAAnB;AAEA,SAAK3B,aAAL,GAAqB,KAAKA,aAAL,CAAmB2B,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAgCDC,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,KAAKlC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAI,KAAKG,KAAL,CAAWK,KAA3B;AACA,QAAA,MAAM,EAAE,KAAKE,WADb;AAEA,QAAA,SAAS,EAAEd;AAFX;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AA7DwC","sourcesContent":["import React, { Component } from 'react'\nimport {dogBingoOptions} from './constants/dogBingoOptions'\nimport Board from './components/Board'\nlet dimension = 5;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pick: new Array(dimension * dimension).fill(0),\n      slots: [],\n      result: [],\n      row: [],\n      column: [],\n      options: dogBingoOptions,\n      hits: null\n\n    }\n    this.handleGenerateRandom = this.handleGenerateRandom.bind(this)\n    this.handleClick = this.handleClick.bind(this\n      )\n    this.generateCards = this.generateCards.bind(this)\n  }\n\n  handleGenerateRandom = () => {\n    console.log(this.state.options)\n    const randCards = this.generateCards(dimension * dimension)\n    console.log(randCards)\n    this.setState({\n      slots: randCards,\n      result: randCards\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault()\n    console.log(\"CLICKED!\")\n  }\n\n  generateCards = (max) => {\n    //Create pool of spaces\n    const pool = Array.apply(null, Array(max+1)).map(function (_, i) {return i;});\n      let arr = [];\n      while(arr.length < max){\n        const idx = Math.floor(Math.random()* dogBingoOptions.length)\n        const dogEl = dogBingoOptions[idx]\n        console.log(idx)\n        if(pool[idx] != 0){\n          arr.push(dogEl);\n          pool[idx] = 0;\n        }\n      }\n      return arr;\n  }\n  render() {\n    \n    return (\n      <div>\n        <h1>Bingo</h1>\n        <button>Clear</button>\n        <button onClick={this.handleGenerateRandom}>New Card</button>\n        <Board slots = {this.state.slots} \n        handle={this.handleClick}\n        dimension={dimension}/>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}